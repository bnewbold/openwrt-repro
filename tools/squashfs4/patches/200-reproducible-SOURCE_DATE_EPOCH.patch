diff --git a/squashfs-tools/mksquashfs.c b/squashfs-tools/mksquashfs.c
index d221c35..42e0651 100644
--- a/squashfs-tools/mksquashfs.c
+++ b/squashfs-tools/mksquashfs.c
@@ -3724,6 +3724,9 @@
 	struct pseudo_entry *pseudo_ent;
 	struct stat buf;
 	static int pseudo_ino = 1;
+	char *source_date_epoch;
+	struct tm *time_universal;
+	time_t mkfs_time;
 	
 	if(dir == NULL && (dir = scan1_opendir("")) == NULL)
 		return NULL;
@@ -3795,7 +3798,24 @@
 		buf.st_gid = pseudo_ent->dev->gid;
 		buf.st_rdev = makedev(pseudo_ent->dev->major,
 			pseudo_ent->dev->minor);
-		buf.st_mtime = time(NULL);
+
+		source_date_epoch = getenv("SOURCE_DATE_EPOCH");
+		if (source_date_epoch != NULL) {
+			mkfs_time = (time_t) strtol(source_date_epoch, NULL, 10);
+
+			time_universal = gmtime(&mkfs_time);
+			if (time_universal == NULL) {
+				fprintf(stderr, "%s: SOURCE_DATE_EPOCH is not valid\n",
+					__func__);
+				mkfs_time = 0;
+			} else {
+				mkfs_time = mktime(time_universal);
+			}
+		} else {
+			mkfs_time = time(NULL);
+		}
+
+		buf.st_mtime = mkfs_time;
 		buf.st_ino = pseudo_ino ++;
 
 		if(pseudo_ent->dev->type == 'f') {
@@ -4582,6 +4582,9 @@
 	int readb_mbytes = READER_BUFFER_DEFAULT,
 		writeb_mbytes = WRITER_BUFFER_DEFAULT,
 		fragmentb_mbytes = FRAGMENT_BUFFER_DEFAULT;
+	char *source_date_epoch;
+	struct tm *time_universal;
+	time_t mkfs_time;
 
 	pthread_mutex_init(&progress_mutex, NULL);
 	block_log = slog(block_size);
@@ -5314,7 +5317,23 @@
 	sBlk.flags = SQUASHFS_MKFLAGS(noI, noD, noF, noX, no_fragments,
 		always_use_fragments, duplicate_checking, exportable,
 		no_xattrs, comp_opts);
-	sBlk.mkfs_time = time(NULL);
+
+	source_date_epoch = getenv("SOURCE_DATE_EPOCH");
+	if (source_date_epoch != NULL) {
+		mkfs_time = (time_t) strtol(source_date_epoch, NULL, 10);
+
+		time_universal = gmtime(&mkfs_time);
+		if (time_universal == NULL) {
+			fprintf(stderr, "%s: SOURCE_DATE_EPOCH is not valid\n",
+				__func__);
+			mkfs_time = 0;
+		} else {
+			mkfs_time = mktime(time_universal);
+		}
+	} else {
+		mkfs_time = time(NULL);
+	}
+	sBlk.mkfs_time = mkfs_time;
 
 restore_filesystem:
 	if(progress && estimated_uncompressed) {

